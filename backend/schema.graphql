"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `FormResponse`."""
  formResponses(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormResponse`."""
    orderBy: [FormResponsesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResponseCondition
  ): FormResponsesConnection

  """Reads and enables pagination through a set of `Form`."""
  forms(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormCondition
  ): FormsConnection
  formResponse(id: UUID!): FormResponse
  form(id: UUID!): Form

  """Reads a single `FormResponse` using its globally unique `ID`."""
  formResponseByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `FormResponse`.
    """
    nodeId: ID!
  ): FormResponse

  """Reads a single `Form` using its globally unique `ID`."""
  formByNodeId(
    """The globally unique `ID` to be used in selecting a single `Form`."""
    nodeId: ID!
  ): Form
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""A connection to a list of `FormResponse` values."""
type FormResponsesConnection {
  """A list of `FormResponse` objects."""
  nodes: [FormResponse!]!

  """
  A list of edges which contains the `FormResponse` and cursor to aid in pagination.
  """
  edges: [FormResponsesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FormResponse` you could get from the connection."""
  totalCount: Int!
}

type FormResponse implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  formId: UUID!
  answers: JSON
  createdAt: Datetime!

  """Reads a single `Form` that is related to this `FormResponse`."""
  form: Form
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

type Form implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  formName: String!
  formFields: JSON!
  createdAt: Datetime!

  """Reads and enables pagination through a set of `FormResponse`."""
  formResponses(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormResponse`."""
    orderBy: [FormResponsesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormResponseCondition
  ): FormResponsesConnection!
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""Methods to use when ordering `FormResponse`."""
enum FormResponsesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  FORM_ID_ASC
  FORM_ID_DESC
  ANSWERS_ASC
  ANSWERS_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `FormResponse` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input FormResponseCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `formId` field."""
  formId: UUID

  """Checks for equality with the object’s `answers` field."""
  answers: JSON

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""A `FormResponse` edge in the connection."""
type FormResponsesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FormResponse` at the end of the edge."""
  node: FormResponse!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""A connection to a list of `Form` values."""
type FormsConnection {
  """A list of `Form` objects."""
  nodes: [Form!]!

  """
  A list of edges which contains the `Form` and cursor to aid in pagination.
  """
  edges: [FormsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Form` you could get from the connection."""
  totalCount: Int!
}

"""A `Form` edge in the connection."""
type FormsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Form` at the end of the edge."""
  node: Form!
}

"""Methods to use when ordering `Form`."""
enum FormsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  FORM_NAME_ASC
  FORM_NAME_DESC
  FORM_FIELDS_ASC
  FORM_FIELDS_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Form` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input FormCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `formName` field."""
  formName: String

  """Checks for equality with the object’s `formFields` field."""
  formFields: JSON

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `FormResponse`."""
  createFormResponse(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFormResponseInput!
  ): CreateFormResponsePayload

  """Creates a single `Form`."""
  createForm(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFormInput!
  ): CreateFormPayload

  """
  Updates a single `FormResponse` using its globally unique id and a patch.
  """
  updateFormResponseByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormResponseByNodeIdInput!
  ): UpdateFormResponsePayload

  """Updates a single `FormResponse` using a unique key and a patch."""
  updateFormResponse(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormResponseInput!
  ): UpdateFormResponsePayload

  """Updates a single `Form` using its globally unique id and a patch."""
  updateFormByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormByNodeIdInput!
  ): UpdateFormPayload

  """Updates a single `Form` using a unique key and a patch."""
  updateForm(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormInput!
  ): UpdateFormPayload

  """Deletes a single `FormResponse` using its globally unique id."""
  deleteFormResponseByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormResponseByNodeIdInput!
  ): DeleteFormResponsePayload

  """Deletes a single `FormResponse` using a unique key."""
  deleteFormResponse(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormResponseInput!
  ): DeleteFormResponsePayload

  """Deletes a single `Form` using its globally unique id."""
  deleteFormByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormByNodeIdInput!
  ): DeleteFormPayload

  """Deletes a single `Form` using a unique key."""
  deleteForm(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormInput!
  ): DeleteFormPayload
}

"""The output of our create `FormResponse` mutation."""
type CreateFormResponsePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormResponse` that was created by this mutation."""
  formResponse: FormResponse

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Form` that is related to this `FormResponse`."""
  form: Form

  """An edge for our `FormResponse`. May be used by Relay 1."""
  formResponseEdge(
    """The method to use when ordering `FormResponse`."""
    orderBy: [FormResponsesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResponsesEdge
}

"""All input for the create `FormResponse` mutation."""
input CreateFormResponseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FormResponse` to be created by this mutation."""
  formResponse: FormResponseInput!
}

"""An input for mutations affecting `FormResponse`"""
input FormResponseInput {
  id: UUID
  formId: UUID!
  answers: JSON
  createdAt: Datetime
}

"""The output of our create `Form` mutation."""
type CreateFormPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Form` that was created by this mutation."""
  form: Form

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Form`. May be used by Relay 1."""
  formEdge(
    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormsEdge
}

"""All input for the create `Form` mutation."""
input CreateFormInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Form` to be created by this mutation."""
  form: FormInput!
}

"""An input for mutations affecting `Form`"""
input FormInput {
  id: UUID
  formName: String!
  formFields: JSON!
  createdAt: Datetime
}

"""The output of our update `FormResponse` mutation."""
type UpdateFormResponsePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormResponse` that was updated by this mutation."""
  formResponse: FormResponse

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Form` that is related to this `FormResponse`."""
  form: Form

  """An edge for our `FormResponse`. May be used by Relay 1."""
  formResponseEdge(
    """The method to use when ordering `FormResponse`."""
    orderBy: [FormResponsesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResponsesEdge
}

"""All input for the `updateFormResponseByNodeId` mutation."""
input UpdateFormResponseByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FormResponse` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `FormResponse` being updated.
  """
  patch: FormResponsePatch!
}

"""
Represents an update to a `FormResponse`. Fields that are set will be updated.
"""
input FormResponsePatch {
  id: UUID
  formId: UUID
  answers: JSON
  createdAt: Datetime
}

"""All input for the `updateFormResponse` mutation."""
input UpdateFormResponseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FormResponse` being updated.
  """
  patch: FormResponsePatch!
  id: UUID!
}

"""The output of our update `Form` mutation."""
type UpdateFormPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Form` that was updated by this mutation."""
  form: Form

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Form`. May be used by Relay 1."""
  formEdge(
    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormsEdge
}

"""All input for the `updateFormByNodeId` mutation."""
input UpdateFormByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Form` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Form` being updated.
  """
  patch: FormPatch!
}

"""Represents an update to a `Form`. Fields that are set will be updated."""
input FormPatch {
  id: UUID
  formName: String
  formFields: JSON
  createdAt: Datetime
}

"""All input for the `updateForm` mutation."""
input UpdateFormInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Form` being updated.
  """
  patch: FormPatch!
  id: UUID!
}

"""The output of our delete `FormResponse` mutation."""
type DeleteFormResponsePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormResponse` that was deleted by this mutation."""
  formResponse: FormResponse
  deletedFormResponseNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Form` that is related to this `FormResponse`."""
  form: Form

  """An edge for our `FormResponse`. May be used by Relay 1."""
  formResponseEdge(
    """The method to use when ordering `FormResponse`."""
    orderBy: [FormResponsesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormResponsesEdge
}

"""All input for the `deleteFormResponseByNodeId` mutation."""
input DeleteFormResponseByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FormResponse` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteFormResponse` mutation."""
input DeleteFormResponseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `Form` mutation."""
type DeleteFormPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Form` that was deleted by this mutation."""
  form: Form
  deletedFormNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Form`. May be used by Relay 1."""
  formEdge(
    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormsEdge
}

"""All input for the `deleteFormByNodeId` mutation."""
input DeleteFormByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Form` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteForm` mutation."""
input DeleteFormInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}
